import streamlit as st
import pandas as pd
import numpy as np
import gspread
import plotly.express as px
import openpyxl
from oauth2client.service_account import ServiceAccountCredentials
#from streamlit_gsheets import GSheetsConnection
from datetime import datetime, timedelta
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib.units import inch
from io import BytesIO
from utils import carregar_dados
from random import randint

# Configurando a p√°gina
st.set_page_config(page_title="Produtividade 4¬∫ BPM",page_icon="brasao.jpg",layout='wide')

# Add authentication check at the start
if 'authenticated' not in st.session_state or not st.session_state['authenticated']:
    st.switch_page("Home.py")

# Hide Streamlit elements and add spacing
hide_st_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            [data-testid-"stToolbar"] {visibility: hidden;}
            #[data-testid-"stStatusWidget"] {visibility: hidden;}
            
            

            /* Espa√ßamento para elementos */
            div.stDataFrame {margin-top: 1rem; margin-bottom: 1rem;}
            div.element-container {margin-top: 0.1rem; margin-bottom: 0.1rem;}
            .block-container {padding-top: 1rem; padding-bottom: 1rem;}
            h1 {margin-bottom: 1rem;}
            div.stExpander {margin-top: 0.1rem; margin-bottom: 2rem;}
            </style>
            """
st.markdown(hide_st_style, unsafe_allow_html=True)

# Configura√ß√£o de credenciais
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(st.secrets["connections"]["gsheets"], scope)
client = gspread.authorize(credentials)

# Mover o dicion√°rio de tradu√ß√£o dos meses para antes da fun√ß√£o carregar_dados
meses = {'January':'Janeiro', 'February':'Fevereiro', 'March': 'Mar√ßo',
         'April': 'Abril', 'May': 'Maio', 'June': 'Junho', 'July': 'Julho',
         'August': 'Agosto', 'September': 'Setembro', 'October': 'Outubro',
         'November': 'Novembro', 'December': 'Dezembro'}

# Fun√ß√£o para carregar os dados

@st.cache_data(ttl=1)  # Cache com tempo de vida curto
def carregar_dados():
    planilha = client.open_by_key('1PLZZMSrp19FFvVIAOhZTVnRh7Tk7EQLoROZy4OaBCDg')
    aba = planilha.worksheet('Sheet_Pontuacao')

    # Acessar os dados da planilha
    dados = aba.get_all_values()

    # Convertendo em DataFrame do pandas      
    df = pd.DataFrame(dados)  
    # Retirando a primeira linha do df
    dfTratado = pd.DataFrame(dados[1:], columns=dados[0])
    df = dfTratado
    
    # Converter DATA para datetime e criar colunas derivadas
    df['DATA'] = pd.to_datetime(df['DATA'], format='%d/%m/%Y', errors='coerce')
    df['ANO'] = df['DATA'].dt.year.astype(str)
    df['M√äS'] = df['DATA'].dt.strftime('%B').map(meses)
    df['QTDE'] = pd.to_numeric(df['QTDE'], errors='coerce')  # Converter QTDE para n√∫mero
    df['PONTOS'] = pd.to_numeric(df['PONTOS'], errors='coerce')  # Converter PONTOS para n√∫mero
    # Somente ap√≥s todas as opera√ß√µes .dt, converter DATA para string
    df['DATA'] = df['DATA'].dt.strftime('%d/%m/%Y')

    
    
    return df
      
df = carregar_dados()

# T√≠tulo do aplicativo
#st.title("PRODUTIVIDADE E PONTUA√á√ÉO")
st.markdown("<h1 style='text-align: center;'>PRODUTIVIDADE E PONTUA√á√ÉO</h1>", unsafe_allow_html=True)

# Texto na p√°gina

def refresh_data():
    try:
        with st.spinner('Atualizando dados...'):
            # Limpa o cache espec√≠fico da fun√ß√£o
            carregar_dados.clear()
            # Atualiza os dados na sess√£o
            st.session_state.data = carregar_dados()
            st.success('‚úÖ Dados atualizados com sucesso!')
            return True
    except Exception as e:
        st.error(f'‚ùå Erro ao atualizar dados: {str(e)}')
        return False

# Inicializa√ß√£o dos dados na sess√£o
if 'data' not in st.session_state:
    st.session_state.data = carregar_dados()

# Layout do t√≠tulo e bot√£o
col1, col2 = st.columns([0.85, 0.15])
with col1:
    st.write("Produtividade - 4¬∫ BPM PMRN")
with col2:
    if st.button("üîÑ", help="Atualizar dados"):
        refresh_data()

# Use os dados do session_state
df = st.session_state.data

# Sidebar com filtros
st.sidebar.markdown("<h1 style='text-align: center;'>4¬∫ BPM - PMRN</h1>", unsafe_allow_html=True)
st.sidebar.image("brasao.jpg")
st.sidebar.caption("Batalh√£o Potengi")
st.sidebar.markdown("<h1 style='text-align: center;'>FILTROS</h1>", unsafe_allow_html=True)


# Filtros corrigidos
anos_disponiveis = sorted(df['ANO'].dropna().unique())
meses_ordem_correta = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 
                      'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
meses_disponiveis = [mes for mes in meses_ordem_correta if mes in df['M√äS'].unique()]

# Novos filtros para COMPANHIA, EFETIVO e TIPO_OC
companhias_disponiveis = sorted(df['COMPANHIA'].dropna().unique())
efetivos_disponiveis = sorted(df['EFETIVO'].dropna().unique())
tipos_oc_disponiveis = sorted(df['TIPO_OC'].dropna().unique())

# Filtros na sidebar
anos = st.sidebar.multiselect('Ano', options=anos_disponiveis, placeholder='Selecione o Ano')
meses_selecionados = st.sidebar.multiselect('M√™s', options=meses_disponiveis, placeholder='Selecione o M√™s')
companhias = st.sidebar.multiselect('Companhia', options=companhias_disponiveis, placeholder='Selecione a Companhia')
efetivos = st.sidebar.multiselect('Efetivo', options=efetivos_disponiveis, placeholder='Selecione o Efetivo')
tipos_oc = st.sidebar.multiselect('Tipo de Ocorr√™ncia', options=tipos_oc_disponiveis,placeholder='Selecione a Ocorr√™ncia')

# Aplicando filtros diretamente no df
if anos:
    df = df[df['ANO'].isin(anos)]
if meses_selecionados:
    df = df[df['M√äS'].isin(meses_selecionados)]
if companhias:
    df = df[df['COMPANHIA'].isin(companhias)]
if efetivos:
    df = df[df['EFETIVO'].isin(efetivos)]
if tipos_oc:
    df = df[df['TIPO_OC'].isin(tipos_oc)]

# Criar expander para mostrar os dados
with st.expander("Sobre o Aplicativo:"):
    st.write("""Este aplicativo foi desenvolvido para mostrar a produtividade e pontua√ß√£o do efetivo do 4¬∫ BPM PMRN, baseado nas Categorias, Crit√©rios e Pontos elencados abaixo:""")
    st.write("ARMA BRANCA  (Homic√≠dio, Tentativa de homic√≠dio com Les√£o Corporal Grave e Roubo consumado): 05 pontos")
    st.write("ARTESANAL CURTA: 20 pontos")
    st.write("ARTESANAL LONGA: 25 pontos")
    st.write("COLETE BAL√çSTICO: 20 pontos")
    st.write("ESPINGARDA: 35 pontos")
    st.write("METRALHADORA: 40 pontos")
    st.write("FUZIL: 50 pontos")
    st.write("PISTOLA: 30 pontos")
    st.write("REV√ìLVER: 25 pontos")
    st.write("RIFLE: 35 pontos")
    st.write("SIMULACRO: 06 pontos")
    st.write("ENTORPECENTE De 1g a 500g - Peso 1 (Duas ou mais Ocorr√™ncias no mesmo dia at√© o total contar√° como pontua√ß√£o subsequente): 15 pontos")
    st.write("ENTORPECENTE De 500g a 2kg - Peso 2 (Duas ou mais Ocorr√™ncias no mesmo dia at√© o total contar√° como pontua√ß√£o subsequente): 20 pontos")
    st.write("ENTORPECENTE De 2g a 10kg - Peso 3 (Duas ou mais Ocorr√™ncias no mesmo dia at√© o total contar√° como pontua√ß√£o subsequente): 30 pontos")
    st.write("ENTORPECENTE Acima de 10kg - Peso 4: 50 pontos")
    st.write("ARROMBAMENTO: 06 pontos")
    st.write("ESTELIONATO: 07 pontos")
    st.write("FURTO: 06 pontos")
    st.write("RECEPTA√á√ÉO: 08 pontos")
    st.write("ROUBO: 12 pontos")
    st.write("MUNI√á√ÉO 1 - 10: 05 pontos")
    st.write("MUNI√á√ÉO 11 - 20: 10 pontos")
    st.write("MUNI√á√ÉO 21 - 50: 15 pontos")
    st.write("MUNI√á√ÉO 51 - 100: 20 pontos")
    st.write("MUNI√á√ÉO 101 ou mais: 30 pontos")
    st.write("FORAGIDO: 10 pontos")
    st.write("VE√çCULO ABANDONADO: 06 pontos")
    st.write("VE√çCULO (FURTO/ROUBO) APREENDIDO: 07 pontos")
    st.write("TCO/BOC 4¬∫ BPM: 06 pontos")
    st.write("TCO/BOC DELEGACIA: 03 pontos")
    st.write("BOPM: 03 pontos")
    st.write("VIOL√äNCIA DOM√âSTICA: 05 pontos")
    st.write("ESTUPRO COM FLAGRANTE: 30 pontos")
    st.write("HOMIC√çDIO COM PRIS√ÉO: 50 pontos")
    
# Fun√ß√£o para criar PDF
def create_pdf(df):
    if df.empty:
        st.error("N√£o h√° dados para gerar o PDF")
        return None
        
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=landscape(A4))
    elements = []
    
    # Ensure data is properly converted to strings
    df_copy = df.fillna('')  # Replace NaN with empty string
    df_copy = df_copy.astype(str)  # Convert all values to strings
    
    # Convert DataFrame to list with error handling
    try:
        data = [df_copy.columns.tolist()] + df_copy.values.tolist()
        
        # Validate data before creating table
        if not data or len(data[0]) == 0:
            st.error("Dados inv√°lidos para gerar PDF")
            return None
            
        # Create table with validated data
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        elements.append(table)
        doc.build(elements)
        
        pdf = buffer.getvalue()
        buffer.close()
        return pdf
        
    except Exception as e:
        st.error(f"Erro ao gerar PDF: {str(e)}")
        return None

# Update the PDF download section
try:
    # Mostrar DataFrame
    st.dataframe(df, use_container_width=True)
    
    # Criar bot√£o de download apenas se houver dados
    pdf = create_pdf(df)
    if pdf is not None:
        st.download_button(
            label="üì• Baixar Relat√≥rio em PDF",
            data=pdf,
            file_name="produtividade.pdf",
            mime="application/pdf",
            use_container_width=True,
        )
except Exception as e:
    st.error(f"Erro ao exibir dados: {str(e)}")

    
# Resumo dos dados
st.divider()
st.subheader("RESUMO DOS DADOS")
st.write(f"Total de registros encontrados: {len(df)}")
#st.write(f"Quantidade: {sum(df['QTDE'])}")
st.write(f"Total de Pontos: {sum(df['PONTOS'])}")


st.divider()

# Criar ranking com formato melhorado e ordena√ß√£o decrescente
st.markdown("<h1 style='text-align: center;'>RANKING DE PRODUTIVIDADE</h1>", unsafe_allow_html=True)
ranking = df.groupby(['EFETIVO', 'COMPANHIA']).agg({
        'PONTOS': 'sum',
        'QTDE': 'sum'
    }).reset_index()
    
ranking = ranking.sort_values('PONTOS', ascending=False)
ranking.index = range(1, len(ranking) + 1)
ranking['PONTOS'] = ranking['PONTOS'].astype(int)

    # Mostrar ranking formatado
st.dataframe(
        ranking,
        use_container_width=True,
        column_config={
            "PONTOS": st.column_config.NumberColumn(
                "PONTOS",
                format="%d"
            )
        }
    )

try:
    # Criar bot√£o de download apenas se houver dados
    pdf = create_pdf(ranking)
    if pdf is not None:
        st.download_button(
            label="üì• Baixar Ranking em PDF",
            data=pdf,
            file_name="ranking_produtividade.pdf",
            mime="application/pdf",
            use_container_width=True,
        )
except Exception as e:
    st.error(f"Erro ao exibir dados do ranking: {str(e)}")

    # Gr√°fico horizontal melhorado com ordem decrescente
fig = px.bar(
        ranking.sort_values('PONTOS', ascending=True),
        y='EFETIVO',
        x='PONTOS',
        title='Gr√°fico Ranking',
        text=[f" {p:d}" for i, p in zip(range(len(ranking), 0, -1), 
              ranking.sort_values('PONTOS', ascending=True)['PONTOS'])],
        orientation='h',
        height=600,  # Ajuste din√¢mico da altura baseado no n√∫mero de registros
        width=800  # Ajuste din√¢mico da largura
    )
    
fig.update_layout(
        xaxis_title="Total de Pontos",
        yaxis_title="Efetivo",
        showlegend=False,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font={'color': 'white', 'size': 12},
        title={
            'text': 'Gr√°fico Ranking',
            'x': 0.5,  # Center title
            'xanchor': 'center',
            'font': {'color': 'white', 'size': 20, 'family': 'Arial Black'},
            'y': 0.95,  # Ajusta posi√ß√£o vertical do t√≠tulo
            'yanchor': 'top',
            'pad': {'b': 30}  # Adiciona margem inferior ao t√≠tulo
        },
        yaxis={'tickfont': {'size': 12}},  # Aumentar fonte do eixo Y
        margin=dict(l=20, r=150, t=100, b=20),  # Aumentado t (top margin) para 60
        bargap=0.5  # Espa√ßamento entre barras
    )

fig.update_traces(
        marker_color='#1f77b4',
        textfont={'color': 'white', 'size': 12, 'family': 'Arial Bold'},
        textposition='outside',
        #marker_line_color='white',
        marker_line_width=0.1,
        hovertemplate='<b>%{y}</b><br>Pontua√ß√£o: %{x:.d} pontos<extra></extra>',
        hoverlabel=dict(
            bgcolor='white',
            font_size=14,
            font_family='Arial',
            font_color='#1f77b4'
        )
    )

    # Remover grades e ajustar eixos
fig.update_xaxes(showgrid=False, title_font={'size': 14})
fig.update_yaxes(showgrid=False, title_font={'size': 14})

st.plotly_chart(fig, use_container_width=True)
#except Exception as e:
#st.error(f"Erro ao processar dados: {str(e)}")

# Resumo dos dados
st.divider()
st.subheader("RESUMO DOS DADOS")
st.write(f"Total de registros encontrados: {len(df)}")
st.write(f"Total de Pontos: {sum(df['PONTOS'])}")


st.divider()































